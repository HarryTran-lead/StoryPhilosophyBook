import React, { useMemo, useState, useRef, useEffect } from "react";
import { ChevronLeft, ChevronRight, Home, BookOpenCheck } from "lucide-react";
import { useNavigate } from "react-router-dom";

import "../styles/PhilosophyStoryBook.css";
import "../styles/BookAnimations.css";
import "../styles/BookTheme.css";

const PhilosophyStoryBook = () => {
  const navigate = useNavigate();

  // Kh√≥a flip t·ª©c th·ªùi (kh√¥ng ph·ª• thu·ªôc render c·ªßa state)
  const flippingRef = useRef(false);
  const pendingActionRef = useRef(null); // "next" | "prev"
  const activeIndexRef = useRef(-1);

  // ============= SPREADS (gi·ªØ nguy√™n n·ªôi dung c·ªßa b·∫°n) =============
  const spreads = useMemo(
    () => [
      {
        left: null,
        right: (
          <div className="page-content cover-front">
            <div className="cover-design">
              <div className="cover-stars">
                <div className="star star-1"></div>
                <div className="star star-2"></div>
                <div className="star star-3"></div>
                <div className="star star-4"></div>
                <div className="star star-5"></div>
              </div>
              <div className="cover-ornament top"></div>
              <div className="cover-title">
                <div className="title-backdrop"></div>
                <h1 className="main-title">
                  <span className="title-line-1">TRI·∫æT L√ù</span>
                  <span className="title-line-2">CU·ªòC S·ªêNG</span>
                </h1>
                <div className="subtitle">Nh·ªØng Suy Ng·∫´m V·ªÅ ƒê·ªùi Ng∆∞·ªùi</div>
              </div>
              <div className="cover-quote">
                <div className="quote-marks">"</div>
                <div className="quote-text">
                  Cu·ªôc s·ªëng kh√¥ng ph·∫£i l√† t√¨m ki·∫øm b·∫£n th√¢n,<br />
                  m√† l√† t·∫°o d·ª±ng b·∫£n th√¢n
                </div>
                <div className="quote-author">‚Äî George Bernard Shaw</div>
                <div className="quote-marks closing">"</div>
              </div>
              <div className="cover-ornament bottom"></div>
              <div className="cover-glow"></div>
            </div>
          </div>
        ),
      },

      // ======== Ch.I ========
      {
        left: (
          <div className="page-content page-left">
            <div className="page-header">
              <h2>Ch∆∞∆°ng I</h2>
              <div className="chapter-ornament">‚ù¶</div>
            </div>
            <div className="page-body">
              <h3>B·∫£n Ch·∫•t Con Ng∆∞·ªùi</h3>
              <p className="first-letter">
                Con ng∆∞·ªùi sinh ra kh√¥ng ph·∫£i ƒë·ªÉ t·ªìn t·∫°i, m√† ƒë·ªÉ s·ªëng. S·ª± kh√°c bi·ªát gi·ªØa "t·ªìn t·∫°i" v√† "s·ªëng" ch√≠nh l√† √Ω th·ª©c v·ªÅ b·∫£n th√¢n v√† kh·∫£ nƒÉng t·∫°o ra √Ω nghƒ©a.
              </p>
              <p>
                Aristotle t·ª´ng n√≥i: "Con ng∆∞·ªùi l√† ƒë·ªông v·∫≠t c√≥ l√Ω tr√≠". Nh∆∞ng l√Ω tr√≠ kh√¥ng ch·ªâ l√† kh·∫£ nƒÉng suy nghƒ©, m√† c√≤n l√† kh·∫£ nƒÉng ch·ªçn l·ª±a, quy·∫øt ƒë·ªãnh v√† ch·ªãu tr√°ch nhi·ªám cho nh·ªØng l·ª±a ch·ªçn ƒë√≥.
              </p>
              <div className="philosophy-quote">
                <div className="quote-symbol">‚ùù</div>
                <p>"T√¥i t∆∞ duy, v·∫≠y t√¥i t·ªìn t·∫°i"</p>
                <div className="quote-author">‚Äî Ren√© Descartes</div>
              </div>
            </div>
            <div className="page-number">2</div>
          </div>
        ),
        right: (
          <div className="page-content page-right">
            <div className="reflection-box">
              <div className="reflection-title">Suy Ng·∫´m</div>
              <p>
                M·ªói con ng∆∞·ªùi ƒë·ªÅu mang trong m√¨nh m·ªôt v≈© tr·ª• ri√™ng - v·ªõi nh·ªØng ∆∞·ªõc m∆°, n·ªói s·ª£, ni·ªÅm vui v√† n·ªói bu·ªìn. Vi·ªác hi·ªÉu ƒë∆∞·ª£c b·∫£n th√¢n kh√¥ng ph·∫£i l√† ƒë√≠ch ƒë·∫øn, m√† l√† h√†nh tr√¨nh su·ªët ƒë·ªùi.
              </p>
            </div>
            <div className="wisdom-section">
              <h4>Ba T·∫ßng √ù Th·ª©c</h4>
              <div className="wisdom-item">
                <span className="wisdom-number">1</span>
                <div>
                  <strong>√ù th·ª©c b·ªÅ m·∫∑t:</strong> Nh·ªØng g√¨ ch√∫ng ta nh·∫≠n bi·∫øt tr·ª±c ti·∫øp
                </div>
              </div>
              <div className="wisdom-item">
                <span className="wisdom-number">2</span>
                <div>
                  <strong>Ti·ªÅm th·ª©c:</strong> Nh·ªØng kinh nghi·ªám v√† k√Ω ·ª©c ƒë∆∞·ª£c l∆∞u gi·ªØ
                </div>
              </div>
              <div className="wisdom-item">
                <span className="wisdom-number">3</span>
                <div>
                  <strong>V√¥ th·ª©c t·∫≠p th·ªÉ:</strong> Tr√≠ tu·ªá chung c·ªßa nh√¢n lo·∫°i
                </div>
              </div>
            </div>
            <div className="page-number">3</div>
          </div>
        ),
      },

      // TODO: th√™m c√°c spread Ch. II, III, IV c·ªßa b·∫°n ngay ƒë√¢y

      // ======== K·∫øt & B√¨a sau ========
      {
        left: (
          <div className="page-content page-left">
            <div className="final-content">
              <div className="conclusion-title">
                <h2>H√†nh Tr√¨nh Kh√¥ng ƒêi·ªÉm ƒê·∫øn</h2>
              </div>
              <div className="final-wisdom">
                <p>
                  Tri·∫øt h·ªçc kh√¥ng ph·∫£i l√† b·ªô s∆∞u t·∫≠p nh·ªØng c√¢u tr·∫£ l·ªùi, m√† l√† ngh·ªá thu·∫≠t ƒë·∫∑t ra nh·ªØng c√¢u h·ªèi ƒë√∫ng. Cu·ªôc s·ªëng kh√¥ng ph·∫£i l√† v·∫•n ƒë·ªÅ c·∫ßn gi·∫£i quy·∫øt, m√† l√† b√≠ ·∫©n c·∫ßn tr·∫£i nghi·ªám.
                </p>
                <div className="life-summary">
                  <div className="summary-item">
                    <span className="summary-icon">üé≠</span>
                    <p><strong>S·ªëng ch√¢n th·∫≠t</strong> v·ªõi ch√≠nh m√¨nh</p>
                  </div>
                  <div className="summary-item">
                    <span className="summary-icon">üåü</span>
                    <p><strong>T·∫°o ra √Ω nghƒ©a</strong> qua h√†nh ƒë·ªông</p>
                  </div>
                  <div className="summary-item">
                    <span className="summary-icon">üíù</span>
                    <p><strong>Y√™u th∆∞∆°ng</strong> kh√¥ng ƒëi·ªÅu ki·ªán</p>
                  </div>
                </div>
              </div>
            </div>
            <div className="page-number">10</div>
          </div>
        ),
        right: (
          <div className="page-content cover-back">
            <div className="back-cover-design">
              <div className="back-stars">
                <div className="star star-1"></div>
                <div className="star star-2"></div>
                <div className="star star-3"></div>
              </div>
              <div className="back-ornament top"></div>
              <div className="back-title">
                <div className="back-title-backdrop"></div>
                <h1>V√î T·∫¨N</h1>
                <div className="infinity-symbol">‚àû</div>
              </div>
              <div className="back-quote">
                <div className="back-quote-text">
                  "Cu·ªëi m·ªói cu·ªën s√°ch<br />l√† kh·ªüi ƒë·∫ßu c·ªßa m·ªôt cu·ªën kh√°c"
                </div>
                <div className="back-quote-divider"></div>
                <div className="back-quote-text">
                  "Cu·ªôc s·ªëng l√† h√†nh tr√¨nh,<br />kh√¥ng ph·∫£i ƒëi·ªÉm ƒë·∫øn"
                </div>
              </div>
              <div className="back-message">
                H√£y ti·∫øp t·ª•c kh√°m ph√°<br />nh·ªØng tri·∫øt l√Ω m·ªõi m·ªói ng√†y
              </div>
              <div className="back-ornament bottom"></div>
              <div className="back-glow"></div>
            </div>
          </div>
        ),
      },
    ],
    []
  );

  // ============= Map th√†nh c√°c t·ªù gi·∫•y (sheet) =============
  // M·ªói sheet i:
  //   - front = spreads[i].right (trang ph·∫£i c·ªßa spread i)
  //   - back  = spreads[i+1]?.left (trang tr√°i c·ªßa spread i+1)
  const papers = useMemo(
    () =>
      spreads.map((s, i) => ({
        front: s.right,
        back: spreads[i + 1]?.left ?? null,
      })),
    [spreads]
  );

  const [turned, setTurned] = useState(() => Array(papers.length).fill(false)); // t·ªù ƒë√£ l·∫≠t
  const [currentPaper, setCurrentPaper] = useState(0); // ƒëang ƒë·ª©ng ·ªü spread n√†o
  const [isFlipping, setIsFlipping] = useState(false);
  const [flipDirection, setFlipDirection] = useState(""); // "next" | "prev"
  const [activeIndex, setActiveIndex] = useState(-1);

  const canPrev = currentPaper > 0 && !isFlipping;
  const canNext = currentPaper < papers.length - 1 && !isFlipping;
  const atFinalSpread = currentPaper === papers.length - 1;

  // ============= Handlers =============
  const onFlipEnd = (e) => {
    if (e.propertyName !== "transform") return;
    if (!flippingRef.current) return;

    const act = pendingActionRef.current;
    if (act === "next") setCurrentPaper((v) => v + 1);
    if (act === "prev") setCurrentPaper((v) => v - 1);

    flippingRef.current = false;
    pendingActionRef.current = null;
    activeIndexRef.current = -1;

    setIsFlipping(false);
    setFlipDirection("");
    setActiveIndex(-1);
  };

  const nextPage = () => {
    if (!canNext || flippingRef.current) return;
    const i = currentPaper;
    flippingRef.current = true;
    pendingActionRef.current = "next";
    activeIndexRef.current = i;

    setFlipDirection("next");
    setActiveIndex(i);
    setIsFlipping(true);
    setTurned((t) => {
      const c = [...t];
      c[i] = true;
      return c;
    });
  };

  const prevPage = () => {
    if (!canPrev || flippingRef.current) return;
    const i = currentPaper - 1;
    flippingRef.current = true;
    pendingActionRef.current = "prev";
    activeIndexRef.current = i;

    setFlipDirection("prev");
    setActiveIndex(i);
    setIsFlipping(true);
    setTurned((t) => {
      const c = [...t];
      c[i] = false;
      return c;
    });
  };

  // L·∫≠t b·∫±ng b√†n ph√≠m
  useEffect(() => {
    const onKey = (e) => {
      if (e.key === "ArrowRight") nextPage();
      if (e.key === "ArrowLeft") prevPage();
    };
    window.addEventListener("keydown", onKey);
    return () => window.removeEventListener("keydown", onKey);
  }, [canNext, canPrev, currentPaper, isFlipping]);

  return (
    <div className="book-scene">
      <div className="book-container">
        {/* Back v·ªÅ Home */}
        <button
          className="global-back-btn"
          aria-label="V·ªÅ trang ch·ªß"
          onClick={() => navigate("/")}
        >
          <Home size={18} />
          <span>V·ªÅ Trang Ch·ªß</span>
        </button>

        {/* g√°y s√°ch */}
        <div className="book-spine">
          <div className="spine-text">TRI·∫æT L√ù CU·ªòC S·ªêNG</div>
        </div>

        {/* Stack sheets */}
        <div className={`book ${isFlipping ? "is-flipping" : ""}`}>
          {papers.map((paper, i) => {
            const clickableNext = !turned[i] && i === currentPaper;
            const clickablePrev = turned[i] && i === currentPaper - 1;

            return (
              <div
                key={i}
                className={[
                  "sheet",
                  turned[i] ? "is-turned" : "",
                  isFlipping && activeIndex === i
                    ? flipDirection === "next"
                      ? "flip-next"
                      : "flip-prev"
                    : "",
                  clickableNext || clickablePrev ? "is-clickable" : "",
                ].join(" ")}
                style={{ zIndex: papers.length - i }}
                onClick={(e) => {
                  e.stopPropagation();
                  if (clickableNext) nextPage();
                  else if (clickablePrev) prevPage();
                }}
                onTransitionEnd={activeIndex === i ? onFlipEnd : undefined}
                data-index={i}
              >
                {/* m·∫∑t tr∆∞·ªõc = trang ph·∫£i c·ªßa spread i */}
                <div className="page-face front">
                  <div className="page-pane right">{paper.front}</div>
                </div>

                {/* m·∫∑t sau = trang tr√°i c·ªßa spread i+1 */}
                <div className="page-face back">
                  <div className="page-pane left">
                    {paper.back ?? <div className="page-content page-left blank" />}
                  </div>
                </div>

                <div className="page-shadow" aria-hidden />
              </div>
            );
          })}
        </div>

        {/* N√∫t ƒëi·ªÅu h∆∞·ªõng */}
        <div className="navigation nav-prev">
          <button
            className="nav-button"
            onClick={prevPage}
            disabled={!canPrev}
            aria-label="Trang tr∆∞·ªõc"
            title="Trang tr∆∞·ªõc"
          >
            <ChevronLeft size={24} />
          </button>
        </div>

        <div className="navigation nav-next">
          <button
            className="nav-button"
            onClick={nextPage}
            disabled={!canNext}
            aria-label="Trang sau"
            title="Trang sau"
          >
            <ChevronRight size={24} />
          </button>
        </div>

        {/* Ch·ªâ s·ªë spread */}
        <div className="page-indicator">
          Trang {Math.min(currentPaper + 1, spreads.length)} / {spreads.length}
        </div>

        {/* Quiz ·ªü spread cu·ªëi */}
        {atFinalSpread && (
          <button
            className="quiz-btn"
            aria-label="ƒêi t·ªõi Quiz"
            onClick={() => navigate("/quiz")}
          >
            <BookOpenCheck size={18} />
            <span>L√†m Quiz</span>
          </button>
        )}
      </div>
    </div>
  );
};

export default PhilosophyStoryBook;
