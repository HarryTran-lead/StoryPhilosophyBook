// src/pages/Quiz_Sidebar.jsx
import React from "react";
import { createPortal } from "react-dom";
import {
  Brain,
  Lightbulb,
  Layers,
  FileQuestion,
  PencilLine,
  CheckCircle2,
  Timer,
  Target,
  X,
  BookOpen,
  Circle,
} from "lucide-react";
import Tooltip from "@mui/material/Tooltip";
import { motion, AnimatePresence } from "framer-motion";

/* ========= Modal Tip (render qua Portal) ========= */
function TipModal({ open, onClose, darkMode }) {
  const closeBtnRef = React.useRef(null);
  const [tab, setTab] = React.useState("overview"); // "overview" | "flashcard" | "quiz" | "fill"

  // Kh√≥a scroll body khi m·ªü + focus close
  React.useEffect(() => {
    if (!open) return;
    const prev = document.body.style.overflow;
    document.body.style.overflow = "hidden";
    const t = setTimeout(() => closeBtnRef.current?.focus(), 0);
    return () => {
      document.body.style.overflow = prev;
      clearTimeout(t);
    };
  }, [open]);

  // ƒê√≥ng b·∫±ng ESC
  React.useEffect(() => {
    if (!open) return;
    const onKey = (e) => e.key === "Escape" && onClose?.();
    window.addEventListener("keydown", onKey);
    return () => window.removeEventListener("keydown", onKey);
  }, [open, onClose]);

  // THEME
  const wrap = darkMode
    ? "bg-slate-800 border-slate-700 text-slate-100"
    : "bg-white border-slate-200 text-slate-800";
  const subtle = darkMode ? "text-slate-400" : "text-slate-500";
  const chipBg = darkMode ? "bg-slate-700/60" : "bg-slate-100";

  const tabs = [
    { key: "overview", label: "T·ªïng quan", icon: Lightbulb },
    { key: "flashcard", label: "Flashcard", icon: Layers },
    { key: "quiz", label: "Tr·∫Øc nghi·ªám", icon: FileQuestion },
    { key: "fill", label: "ƒêi·ªÅn ƒë√°p √°n", icon: PencilLine },
  ];

  // Card ti·ªán d·ª•ng
  const TipCard = ({ tone = "amber", title, children, icon: Icon }) => {
    const lightBg =
      tone === "amber"
        ? "bg-amber-50"
        : tone === "green"
        ? "bg-green-50"
        : tone === "blue"
        ? "bg-blue-50"
        : tone === "violet"
        ? "bg-violet-50"
        : "bg-slate-100";

    const darkBg = "bg-slate-700/60";
    const titleColor =
      tone === "amber"
        ? "text-amber-600"
        : tone === "green"
        ? "text-green-500"
        : tone === "blue"
        ? "text-blue-500"
        : tone === "violet"
        ? "text-violet-500"
        : "text-slate-200";

    return (
      <div className={`${darkMode ? darkBg : lightBg} p-3 rounded-lg`}>
        <div className="flex items-center gap-2 mb-1.5">
          {Icon && <Icon className={`${titleColor} w-4 h-4`} />}
          <div className={`font-medium ${titleColor}`}>{title}</div>
        </div>
        <div className={darkMode ? "text-slate-200" : "text-slate-700"}>
          {children}
        </div>
      </div>
    );
  };

  // Bullet c√≥ icon
  const Bullet = ({ children }) => (
    <div className="flex items-start gap-2">
      <CheckCircle2 className="w-4 h-4 mt-[2px] text-emerald-500" />
      <span>{children}</span>
    </div>
  );

  if (!open) return null;

  return createPortal(
    <AnimatePresence>
      {/* Overlay */}
      <motion.button
        key="overlay"
        type="button"
        aria-label="ƒê√≥ng m·∫πo h·ªçc"
        className="fixed inset-0 z-[100] bg-black/50"
        onClick={onClose}
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
      />

      {/* Modal */}
      <motion.div
        key="modal"
        role="dialog"
        aria-modal="true"
        aria-labelledby="study-tip-title"
        className={`fixed z-[101] left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2
      w-[min(92vw,680px)] max-h-[100vh] overflow-hidden rounded-2xl border shadow-2xl flex flex-col`}
        initial={{ opacity: 0, scale: 0.96 }}
        animate={{ opacity: 1, scale: 1 }}
        exit={{ opacity: 0, scale: 0.98 }}
        transition={{ type: "spring", stiffness: 260, damping: 20 }}
        onClick={(e) => e.stopPropagation()}
      >
        {/* Header gradient nh·ªè */}
        <div
          className={`px-5 sm:px-6 pt-5 pb-4 flex items-start justify-between ${wrap}`}
        >
          <div className="flex items-center gap-3">
            <div
              className={`w-10 h-10 rounded-xl grid place-items-center bg-gradient-to-br
                from-amber-400/30 to-amber-500/20 ring-1 ring-amber-400/30`}
            >
              <Brain className="w-5 h-5 text-amber-400" />
            </div>
            <div>
              <h3 id="study-tip-title" className="text-lg font-bold">
                M·∫πo h·ªçc ghi nh·ªõ hi·ªáu qu·∫£
              </h3>
              <p className={`text-xs ${subtle}`}>
                √Åp d·ª•ng nhanh 2‚Äì3 ph√∫t r·ªìi quay l·∫°i luy·ªán t·∫≠p ƒë·ªÉ t·ªëi ƒëa ho√°
                retention.
              </p>
            </div>
          </div>

          <motion.button
            ref={closeBtnRef}
            whileHover={{ rotate: 90 }}
            transition={{ type: "spring", stiffness: 500, damping: 18 }}
            className={`p-2 rounded-lg  ${
              darkMode ? "hover:bg-slate-700" : "hover:bg-slate-100"
            }`}
            onClick={onClose}
            aria-label="ƒê√≥ng"
          >
            <X className="w-5 h-5" />
          </motion.button>
        </div>

        {/* Tabs */}
        <div className={`${wrap} border-t flex-1 min-h-0 flex flex-col`}>
          <div className="px-5 sm:px-6 pt-3">
            <div className="grid grid-cols-2 sm:grid-cols-4 gap-2">
              {tabs.map(({ key, label, icon: Icon }) => {
                const active = tab === key;
                return (
                  <button
                    key={key}
                    onClick={() => setTab(key)}
                    className={`group flex items-center justify-center gap-2 px-3 py-2 rounded-lg text-sm font-medium
                      border transition
                      ${
                        active
                          ? darkMode
                            ? "bg-gradient-to-r from-amber-300/20 via-amber-300/15 to-amber-400/10 text-amber-100 shadow-sm border-amber-200/40"
                            : "bg-amber-500 text-white ring-amber-500"
                          : darkMode
                          ? "text-slate-200 ring-slate-700 hover:bg-slate-700 border-slate-600"
                          : "text-slate-700 ring-slate-200 hover:bg-slate-50"
                      }`}
                    aria-pressed={active ? "true" : "false"}
                  >
                    <Icon className="w-4 h-4" />
                    {label}
                  </button>
                );
              })}
            </div>
          </div>

          {/* Content */}
          <div className="px-5 sm:px-6 pb-5 sm:pb-6 pt-4 flex-1 min-h-0 overflow-y-auto custom-scrollbar">
            {/* OVERVIEW */}
            {tab === "overview" && (
              <motion.div
                key="overview"
                initial={{ opacity: 0, y: 6 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.2 }}
                className="space-y-3"
              >
                <TipCard
                  tone="amber"
                  title="üéØ Chi·∫øn thu·∫≠t 3‚Äì2‚Äì1"
                  icon={Target}
                >
                  <div className="space-y-1.5">
                    <Bullet>L√†m 3 c√¢u d·ªÖ ‚Üí ngh·ªâ 2 ph√∫t ‚Üí t√≥m 1 √Ω ch√≠nh.</Bullet>
                    <Bullet>L·∫∑p 2‚Äì3 v√≤ng ƒë·ªÉ c·ªßng c·ªë ƒë∆∞·ªùng m√≤n ghi nh·ªõ.</Bullet>
                    <Bullet>
                      <span className={subtle}>Bonus:</span> ƒë·∫∑t timer{" "}
                      <Timer className="inline w-4 h-4 -mt-1" /> 5‚Äì7 ph√∫t m·ªói
                      v√≤ng.
                    </Bullet>
                  </div>
                </TipCard>

                <TipCard
                  tone="green"
                  title="üß† ƒê·ªçc c√¢u h·ªèi tr∆∞·ªõc"
                  icon={Lightbulb}
                >
                  <div className="space-y-1.5">
                    <Bullet>
                      X√°c ƒë·ªãnh t·ª´ kh√≥a ‚Üí l∆∞·ªõt ƒë√°p √°n ‚Üí quay l·∫°i c√¢u h·ªèi.
                    </Bullet>
                    <Bullet>Lo·∫°i tr·ª´ ƒë√°p √°n sai tr∆∞·ªõc khi ch·ªçn.</Bullet>
                  </div>
                </TipCard>

                <TipCard
                  tone="blue"
                  title="‚úçÔ∏è Nh·∫≠t k√Ω l·ªói sai"
                  icon={PencilLine}
                >
                  <div className="space-y-1.5">
                    <Bullet>
                      Ghi 1 c√¢u: ‚ÄúSai v√¨‚Ä¶‚Äù. Kh√¥ng c·∫ßn d√†i, ch·ªâ c·∫ßn tr√∫ng.
                    </Bullet>
                    <Bullet>
                      √în l·∫°i ‚Äúl·ªói sai‚Äù tr∆∞·ªõc khi l√†m v√≤ng ti·∫øp theo.
                    </Bullet>
                  </div>
                </TipCard>

                <TipCard tone="violet" title="‚è±Ô∏è Quy t·∫Øc 80/20" icon={Target}>
                  <div className="space-y-1.5">
                    <Bullet>
                      Ho√†n th√†nh 70‚Äì80% c√¢u d·ªÖ tr∆∞·ªõc ƒë·ªÉ l·∫•y ƒëi·ªÉm/ƒë√†.
                    </Bullet>
                    <Bullet>Quay l·∫°i c√¢u kh√≥ khi ƒë√£ ·∫•m m√°y.</Bullet>
                  </div>
                </TipCard>
              </motion.div>
            )}

            {/* FLASHCARD */}
            {tab === "flashcard" && (
              <motion.div
                key="flashcard"
                initial={{ opacity: 0, y: 6 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.2 }}
                className="grid sm:grid-cols-2 gap-3"
              >
                <TipCard tone="amber" title="Active Recall" icon={Layers}>
                  <div className="space-y-1.5">
                    <Bullet>
                      Nh√¨n thu·∫≠t ng·ªØ, th·ª≠ n√≥i ra ƒë·ªãnh nghƒ©a tr∆∞·ªõc khi l·∫≠t.
                    </Bullet>
                    <Bullet>ƒê√°nh d·∫•u ‚Äúch∆∞a nh·ªõ‚Äù ƒë·ªÉ √¥n l·∫°i v√≤ng sau.</Bullet>
                  </div>
                </TipCard>
                <TipCard tone="green" title="Spaced Repetition" icon={Timer}>
                  <div className="space-y-1.5">
                    <Bullet>√în l·∫°i th·∫ª sai sau 10‚Äì30 ph√∫t, r·ªìi 1 ng√†y.</Bullet>
                    <Bullet>
                      Tr·ªôn (shuffle) ƒë·ªãnh k·ª≥ ƒë·ªÉ tr√°nh thu·ªôc v·ªã tr√≠.
                    </Bullet>
                  </div>
                </TipCard>
                <TipCard tone="blue" title="Dual Coding" icon={Lightbulb}>
                  <div className="space-y-1.5">
                    <Bullet>Th√™m v√≠ d·ª•/·∫£nh nh·ªè gi√∫p kh√°i ni·ªám ‚Äúc√≥ m√≥c‚Äù.</Bullet>
                    <Bullet>D√πng t·ª´ kh√≥a s√∫c t√≠ch ƒë·ªÉ d·ªÖ qu√©t nhanh.</Bullet>
                  </div>
                </TipCard>
                <TipCard
                  tone="violet"
                  title="Say it out loud"
                  icon={CheckCircle2}
                >
                  <div className="space-y-1.5">
                    <Bullet>ƒê·ªçc to ƒë·ªãnh nghƒ©a b·∫±ng l·ªùi c·ªßa b·∫°n.</Bullet>
                    <Bullet>1 c√¢u ‚Äì 1 √Ω ‚Äì 1 v√≠ d·ª•.</Bullet>
                  </div>
                </TipCard>
              </motion.div>
            )}

            {/* TR·∫ÆC NGHI·ªÜM */}
            {tab === "quiz" && (
              <motion.div
                key="quiz"
                initial={{ opacity: 0, y: 6 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.2 }}
                className="grid sm:grid-cols-2 gap-3"
              >
                <TipCard
                  tone="green"
                  title="Lo·∫°i tr·ª´ th√¥ng minh"
                  icon={FileQuestion}
                >
                  <div className="space-y-1.5">
                    <Bullet>
                      G·∫°ch 2 ƒë√°p √°n y·∫øu tr∆∞·ªõc khi c√¢n gi·ªØa 2 ƒë√°p √°n cu·ªëi.
                    </Bullet>
                    <Bullet>
                      T√¨m t·ª´ ‚Äúb·∫´y‚Äù: tuy·ªát ƒë·ªëi (lu√¥n/kh√¥ng bao gi·ªù), m√¢u thu·∫´n
                      logic.
                    </Bullet>
                  </div>
                </TipCard>
                <TipCard
                  tone="amber"
                  title="ƒê·ªçc ch·∫≠m ‚Äì ch·ªçn nhanh"
                  icon={Target}
                >
                  <div className="space-y-1.5">
                    <Bullet>
                      ƒê·ªçc k·ªπ c√¢u h·ªèi m·ªôt l·∫ßn, kh√¥ng ƒë·ªçc qua loa nhi·ªÅu l·∫ßn.
                    </Bullet>
                    <Bullet>
                      Ch·ªçn ƒë√°p √°n h·ª£p l√Ω nh·∫•t, kh√¥ng ph·∫£i ƒë√∫ng 100%.
                    </Bullet>
                  </div>
                </TipCard>
                <TipCard tone="blue" title="Qu·∫£n l√Ω th·ªùi gian" icon={Timer}>
                  <div className="space-y-1.5">
                    <Bullet>
                      Timebox: ~60‚Äì90s/c√¢u, qu√° th·ªùi gian ‚Üí ƒë√°nh d·∫•u & ƒëi ti·∫øp.
                    </Bullet>
                    <Bullet>
                      ∆Øu ti√™n ƒëi·ªÉm d·ªÖ tr∆∞·ªõc, quay l·∫°i c√¢u kh√≥ sau.
                    </Bullet>
                  </div>
                </TipCard>
                <TipCard
                  tone="violet"
                  title="ƒê·ªëi chi·∫øu t·ª´ kh√≥a"
                  icon={Lightbulb}
                >
                  <div className="space-y-1.5">
                    <Bullet>
                      T·ª´ kh√≥a trong ƒë√°p √°n ph·∫£i kh·ªõp ng·ªØ c·∫£nh c√¢u h·ªèi.
                    </Bullet>
                    <Bullet>
                      N·∫øu 2 ƒë√°p √°n g·∫ßn gi·ªëng, ch·ªçn ƒë√°p √°n c·ª• th·ªÉ h∆°n.
                    </Bullet>
                  </div>
                </TipCard>
              </motion.div>
            )}

            {/* ƒêI·ªÄN ƒê√ÅP √ÅN */}
            {tab === "fill" && (
              <motion.div
                key="fill"
                initial={{ opacity: 0, y: 6 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.2 }}
                className="grid sm:grid-cols-2 gap-3"
              >
                <TipCard
                  tone="blue"
                  title="N√≥i b·∫±ng l·ªùi c·ªßa b·∫°n"
                  icon={PencilLine}
                >
                  <div className="space-y-1.5">
                    <Bullet>
                      Vi·∫øt ng·∫Øn g·ªçn, ƒë√∫ng √Ω ‚Äì kh√¥ng sa ƒë√† c√¢u d√†i.
                    </Bullet>
                    <Bullet>
                      D√πng keyword/thu·∫≠t ng·ªØ b·∫Øt bu·ªôc n·∫øu ƒë·ªÅ y√™u c·∫ßu.
                    </Bullet>
                  </div>
                </TipCard>
                <TipCard tone="green" title="T√°ch √Ω ‚Üí gh√©p c√¢u" icon={Layers}>
                  <div className="space-y-1.5">
                    <Bullet>
                      Li·ªát k√™ 2‚Äì3 √Ω ch√≠nh, sau ƒë√≥ gh√©p th√†nh c√¢u ho√†n ch·ªânh.
                    </Bullet>
                    <Bullet>
                      Check ch√≠nh t·∫£ / s·ªë / thu·∫≠t ng·ªØ tr∆∞·ªõc khi n·ªôp.
                    </Bullet>
                  </div>
                </TipCard>
                <TipCard
                  tone="amber"
                  title="G·ª£i √Ω ch·ªØ c√°i ƒë·∫ßu"
                  icon={Lightbulb}
                >
                  <div className="space-y-1.5">
                    <Bullet>
                      N·∫øu b√≠, vi·∫øt ch·ªØ c√°i ƒë·∫ßu m·ªói t·ª´ ƒë·ªÉ ‚Äúk√©o‚Äù k√Ω ·ª©c.
                    </Bullet>
                    <Bullet>Nh√¨n c·∫•u tr√∫c c√¢u ƒë·ªÉ ƒëo√°n d·∫°ng t·ª´ c·∫ßn ƒëi·ªÅn.</Bullet>
                  </div>
                </TipCard>
                <TipCard
                  tone="violet"
                  title="Ki·ªÉm tra ng∆∞·ª£c"
                  icon={CheckCircle2}
                >
                  <div className="space-y-1.5">
                    <Bullet>
                      Thay ƒë√°p √°n v√†o ƒë·ªÅ, ƒë·ªçc l·∫°i xem c√≥ m∆∞·ª£t v√† ƒë√∫ng nghƒ©a.
                    </Bullet>
                    <Bullet>
                      Ch·ªâ s·ª≠a khi ch·∫Øc ch·∫Øn; tr√°nh ‚Äúƒë·ªïi ƒë√∫ng th√†nh sai‚Äù.
                    </Bullet>
                  </div>
                </TipCard>
              </motion.div>
            )}
          </div>
        </div>
      </motion.div>
    </AnimatePresence>,
    document.body
  );
}

/* ========= Sidebar ========= */
export default function QuizSidebar({
  darkMode,
  chapters,
  activeChapter,
  setActiveChapter,
  setCurrentQuestionIndex,
  calculateProgress,
  onClose,
}) {
  const [showTip, setShowTip] = React.useState(false);

  const handleClose = () => {
    if (typeof onClose === "function") onClose();
  };

  const openStudyTipModal = () => setShowTip(true);

  return (
    <>
      <aside
        className={`grid grid-rows-[auto,1fr,auto] h-[100svh] w-80 sm:w-88 transition-colors duration-500
          ${
            darkMode
              ? "bg-slate-900 text-slate-200"
              : "bg-slate-50 border-r border-gray-300 text-slate-800"
          }`}
        role="navigation"
        aria-label="Danh s√°ch ch∆∞∆°ng"
      >
        {/* Header */}
        <div
          className={`relative pl-4 pr-2 pt-3 lg:pl-6 lg:pr-3 lg:pt-4 border-b ${
            darkMode ? "border-slate-800" : "border-slate-200"
          }`}
        >
          <div className="flex items-center justify-between mb-3 lg:mb-4">
            <div className="flex items-center gap-2.5 lg:gap-3">
              <div
                className={`${
                  darkMode
                    ? "bg-gradient-to-br from-amber-300 to-amber-400 text-slate-900"
                    : "bg-amber-200 text-slate-800"
                }
                w-9 h-9 lg:w-10 lg:h-10 rounded-lg flex items-center justify-center`}
              >
                <BookOpen className="w-5 h-5" />
              </div>
              <div>
                <h1
                  className={`text-base lg:text-xl font-bold ${
                    darkMode ? "text-white" : "text-slate-900"
                  }`}
                >
                  Tri·∫øt h·ªçc M√°c-L√™nin
                </h1>
                <p
                  className={`${
                    darkMode ? "text-slate-400" : "text-slate-600"
                  } text-xs lg:text-sm`}
                >
                  H·ªá th·ªëng h·ªçc t·∫≠p th√¥ng minh
                </p>
              </div>
            </div>

            {/* N√∫t b√≥ng ƒë√®n ‚Üí m·ªü modal tip */}
            <div className="flex items-center gap-2">
              <Tooltip title="M·∫πo h·ªçc ghi nh·ªõ" placement="top" arrow>
                <button
                  onClick={openStudyTipModal}
                  className={`p-2 rounded-lg transition-all duration-300 group ${
                    darkMode
                      ? "bg-slate-800 hover:bg-slate-700"
                      : "bg-white border border-slate-200 hover:bg-amber-50 hover:border-amber-200"
                  }`}
                  aria-label="M·ªü m·∫πo h·ªçc ghi nh·ªõ"
                >
                  <Lightbulb className="w-5 h-5 text-slate-200 group-hover:text-amber-300 group-hover:rotate-12 transition-transform duration-300" />
                </button>
              </Tooltip>

              {/* Close (mobile) */}
              <button
                type="button"
                onClick={handleClose}
                className={`lg:hidden p-2 rounded-lg transition-all duration-200 ${
                  darkMode
                    ? "bg-slate-800 hover:bg-slate-700 border border-slate-900"
                    : "bg-white hover:bg-slate-100 border border-slate-200"
                }`}
                aria-label="ƒê√≥ng menu"
              >
                <X
                  className={`w-5 h-5 ${
                    darkMode ? "text-slate-200" : "text-slate-700"
                  }`}
                />
              </button>
            </div>
          </div>
        </div>

        {/* ===== List ch∆∞∆°ng ===== */}
        <div className="overflow-y-auto py-3 lg:py-4 pl-4 pr-3 lg:pl-6 lg:pr-4 custom-scrollbar">
          <div className="space-y-2.5 lg:space-y-3">
            {chapters.map((ch, i) => {
              const progress = calculateProgress(i);
              const active = i === activeChapter;
              return (
                <div key={ch.id ?? `chapter-${i}`} className="group">
                  <button
                    type="button"
                    onClick={() => {
                      setActiveChapter(i);
                      setCurrentQuestionIndex(0);
                    }}
                    aria-current={active ? "page" : undefined}
                    className={`w-full text-left relative p-3 lg:p-4 rounded-xl border shadow-sm transition-all hover:scale-[1.02]
                      ${
                        darkMode
                          ? active
                            ? "bg-gradient-to-r from-amber-300/20 via-amber-300/15 to-amber-400/10 text-amber-100 shadow-inner border-amber-200/40"
                            : "bg-slate-800 border-slate-700 hover:border-amber-300/50"
                          : active
                          ? "bg-amber-50 border-amber-400"
                          : "bg-white border-slate-300 hover:border-amber-400/50 hover:shadow-md"
                      }`}
                  >
                    {/* badge s·ªë th·ª© t·ª± */}
                    <div className="absolute -top-2 -left-2">
                      <div
                        className={`w-7 h-7 lg:w-8 lg:h-8 rounded-full flex items-center justify-center text-xs lg:text-sm font-bold
                          ${
                            darkMode
                              ? active
                                ? "bg-gradient-to-br from-amber-200 to-amber-400 text-slate-900 shadow-md shadow-amber-400/30"
                                : "bg-slate-700/80 text-slate-300 border border-slate-600 group-hover:border-amber-300/50"
                              : active
                              ? "bg-gradient-to-br from-amber-300 to-amber-500 text-slate-800 shadow-md shadow-amber-400/40"
                              : "bg-slate-200 text-slate-600 border border-slate-300 group-hover:border-amber-400/50"
                          }`}
                      >
                        {i + 1}
                      </div>
                    </div>

                    <div className="ml-3.5 lg:ml-4">
                      <div className="flex justify-between mb-2 items-start">
                        <h3
                          className={`font-semibold text-sm lg:text-base leading-tight flex-1
                            ${
                              darkMode
                                ? active
                                  ? "text-amber-100"
                                  : "text-white"
                                : active
                                ? "text-amber-600"
                                : "text-slate-800"
                            }`}
                        >
                          Ch∆∞∆°ng {i + 1}: {ch.title}
                        </h3>
                        <span
                          className={`ml-2.5 px-2 py-0.5 rounded-full text-[10px] lg:text-xs font-medium
                            ${
                              darkMode
                                ? active
                                  ? "bg-amber-200/20 text-amber-300"
                                  : "bg-slate-700 text-slate-300"
                                : active
                                ? "bg-amber-100 text-amber-700"
                                : "bg-slate-100 text-slate-600"
                            }`}
                        >
                          {progress}%
                        </span>
                      </div>

                      <p
                        className={`text-xs lg:text-sm mb-2.5 lg:mb-3 leading-relaxed
                          ${
                            darkMode
                              ? active
                                ? "text-slate-200"
                                : "text-slate-400"
                              : active
                              ? "text-slate-700"
                              : "text-slate-500"
                          }`}
                      >
                        {ch.description}
                      </p>

                      <div
                        className={`${
                          darkMode
                            ? active
                              ? "bg-gradient-to-br from-slate-500 to-slate-600"
                              : "bg-gradient-to-br from-slate-600 to-slate-700"
                            : "bg-slate-200"
                        } w-full rounded-full h-1.5 lg:h-2 overflow-hidden`}
                      >
                        <div
                          style={{ width: `${progress}%` }}
                          className={`h-full rounded-full transition-all duration-500 ${
                            active
                              ? darkMode
                                ? "bg-amber-400"
                                : "bg-amber-500"
                              : darkMode
                              ? "bg-slate-500"
                              : "bg-amber-300"
                          }`}
                        />
                      </div>

                      <div
                        className={`mt-2 text-[11px] lg:text-xs flex items-center gap-1 ${
                          darkMode
                            ? active
                              ? "text-slate-200"
                              : "text-slate-400"
                            : "text-slate-500"
                        }`}
                      >
                        <Circle className="w-3 h-3" />
                        {ch.questions?.length || 0} c√¢u h·ªèi
                      </div>
                    </div>
                  </button>
                </div>
              );
            })}
          </div>
        </div>
      </aside>

      {/* Modal Tip */}
      <TipModal
        open={showTip}
        onClose={() => setShowTip(false)}
        darkMode={darkMode}
      />
    </>
  );
}
